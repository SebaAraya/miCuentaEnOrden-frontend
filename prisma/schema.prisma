// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  ADMIN
  COLABORADOR
  USUARIO_BASICO
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum AlertType {
  BUDGET_WARNING
  BUDGET_EXCEEDED
  MONTHLY_SUMMARY
}

enum ResourceType {
  TRANSACTION
  BUDGET
  CATEGORY
  REPORT
}

enum PermissionType {
  READ
  WRITE
  ADMIN
}

enum RecurringFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

enum BudgetStatus {
  UNDER_BUDGET
  ON_TRACK
  WARNING
  EXCEEDED
}

// ========================================
// MAIN MODELS
// ========================================

model Organization {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  isActive    Boolean  @default(true) @map("is_active")
  settings    Json?

  // Relations
  users      User[]
  categories Category[]

  @@map("organizations")
}

model User {
  id             String    @id @default(uuid())
  email          String    @unique
  passwordHash   String    @map("password_hash")
  name           String
  role           UserRole  @default(USUARIO_BASICO)
  organizationId String?   @map("organization_id")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  isActive       Boolean   @default(true) @map("is_active")
  lastLogin      DateTime? @map("last_login")
  preferences    Json?

  // Relations
  organization         Organization?        @relation(fields: [organizationId], references: [id])
  refreshTokens        RefreshToken[]
  transactions         Transaction[]
  budgets              Budget[]
  budgetAlerts         BudgetAlert[]
  sharedPermissions    SharedPermission[]   @relation("OwnerUser")
  receivedPermissions  SharedPermission[]   @relation("SharedWithUser")
  monthlySummaries     MonthlySummary[]
  monthlyUserSummaries MonthlyUserSummary[]

  @@map("users")
}

model RefreshToken {
  id         String   @id @default(uuid())
  userId     String   @map("user_id")
  tokenHash  String   @map("token_hash")
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  isRevoked  Boolean  @default(false) @map("is_revoked")
  deviceInfo String?  @map("device_info")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Category {
  id             String  @id @default(uuid())
  name           String
  description    String?
  colorHex       String  @default("#6B7280") @map("color_hex")
  icon           String  @default("ðŸ’°")
  isDefault      Boolean @default(false) @map("is_default")
  organizationId String? @map("organization_id")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  isActive       Boolean @default(true) @map("is_active")

  // Relations
  organization     Organization?     @relation(fields: [organizationId], references: [id])
  transactions     Transaction[]
  budgets          Budget[]
  monthlySummaries MonthlySummary[]

  @@map("categories")
}

model Transaction {
  id                  String           @id @default(uuid())
  amount              Decimal          @db.Decimal(12, 2)
  type                TransactionType
  description         String
  transactionDate     DateTime         @map("transaction_date")
  categoryId          String           @map("category_id")
  userId              String           @map("user_id")
  recurringPatternId  String?          @map("recurring_pattern_id")
  metadata            Json?
  createdAt           DateTime         @default(now()) @map("created_at")
  updatedAt           DateTime         @updatedAt @map("updated_at")

  // Relations
  category         Category          @relation(fields: [categoryId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  recurringPattern RecurringPattern? @relation(fields: [recurringPatternId], references: [id])

  @@map("transactions")
}

model Budget {
  id              String   @id @default(uuid())
  name            String
  description     String?
  monthlyAmount   Decimal  @map("monthly_amount") @db.Decimal(12, 2)
  categoryId      String   @map("category_id")
  userId          String   @map("user_id")
  startDate       DateTime @map("start_date")
  endDate         DateTime? @map("end_date")
  isActive        Boolean  @default(true) @map("is_active")
  alertThreshold  Decimal  @default(80.0) @map("alert_threshold") @db.Decimal(5, 2)
  
  // Campos para presupuestos recurrentes
  isRecurring     Boolean  @default(false) @map("is_recurring")
  recurringMonths Int?     @map("recurring_months") // null = indefinido
  autoAdjust      String   @default("none") @map("auto_adjust") // "none", "inflation", "previous"
  parentBudgetId  String?  @map("parent_budget_id") // Para presupuestos generados automÃ¡ticamente
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  category             Category              @relation(fields: [categoryId], references: [id])
  user                 User                  @relation(fields: [userId], references: [id])
  budgetAlerts         BudgetAlert[]
  monthlyBudgetStatus  MonthlyBudgetStatus[]
  
  // RelaciÃ³n auto-referencial para presupuestos padre-hijo
  parentBudget         Budget?               @relation("BudgetRecurrence", fields: [parentBudgetId], references: [id])
  childBudgets         Budget[]              @relation("BudgetRecurrence")

  @@map("budgets")
}

model BudgetAlert {
  id              String    @id @default(uuid())
  budgetId        String    @map("budget_id")
  userId          String    @map("user_id")
  alertType       AlertType @map("alert_type")
  thresholdAmount Decimal   @map("threshold_amount") @db.Decimal(12, 2)
  currentAmount   Decimal   @map("current_amount") @db.Decimal(12, 2)
  message         String
  isRead          Boolean   @default(false) @map("is_read")
  createdAt       DateTime  @default(now()) @map("created_at")

  // Relations
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@map("budget_alerts")
}

model SharedPermission {
  id               String         @id @default(uuid())
  ownerUserId      String         @map("owner_user_id")
  sharedWithUserId String         @map("shared_with_user_id")
  resourceType     ResourceType   @map("resource_type")
  resourceId       String         @map("resource_id")
  permissionType   PermissionType @map("permission_type")
  grantedAt        DateTime       @default(now()) @map("granted_at")
  expiresAt        DateTime?      @map("expires_at")
  isActive         Boolean        @default(true) @map("is_active")

  // Relations
  ownerUser      User @relation("OwnerUser", fields: [ownerUserId], references: [id])
  sharedWithUser User @relation("SharedWithUser", fields: [sharedWithUserId], references: [id])

  @@map("shared_permissions")
}

model RecurringPattern {
  id              String             @id @default(uuid())
  name            String
  frequency       RecurringFrequency
  intervalValue   Int                @map("interval_value")
  frequencyConfig Json?              @map("frequency_config")
  startDate       DateTime           @map("start_date")
  endDate         DateTime?          @map("end_date")
  isActive        Boolean            @default(true) @map("is_active")
  createdAt       DateTime           @default(now()) @map("created_at")
  updatedAt       DateTime           @updatedAt @map("updated_at")

  // Relations
  transactions Transaction[]

  @@map("recurring_patterns")
}

// ========================================
// AGGREGATION MODELS (for performance)
// ========================================

model MonthlySummary {
  id               String   @id @default(uuid())
  userId           String   @map("user_id")
  categoryId       String   @map("category_id")
  year             Int
  month            Int
  totalIncome      Decimal  @map("total_income") @db.Decimal(12, 2)
  totalExpenses    Decimal  @map("total_expenses") @db.Decimal(12, 2)
  netAmount        Decimal  @map("net_amount") @db.Decimal(12, 2)
  transactionCount Int      @map("transaction_count")
  calculatedAt     DateTime @default(now()) @map("calculated_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId, year, month])
  @@map("monthly_summaries")
}

model MonthlyBudgetStatus {
  id               String       @id @default(uuid())
  budgetId         String       @map("budget_id")
  year             Int
  month            Int
  budgetedAmount   Decimal      @map("budgeted_amount") @db.Decimal(12, 2)
  spentAmount      Decimal      @map("spent_amount") @db.Decimal(12, 2)
  remainingAmount  Decimal      @map("remaining_amount") @db.Decimal(12, 2)
  percentageUsed   Decimal      @map("percentage_used") @db.Decimal(5, 2)
  status           BudgetStatus
  calculatedAt     DateTime     @default(now()) @map("calculated_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relations
  budget Budget @relation(fields: [budgetId], references: [id], onDelete: Cascade)

  @@unique([budgetId, year, month])
  @@map("monthly_budget_status")
}

model MonthlyUserSummary {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  year            Int
  month           Int
  totalIncome     Decimal  @map("total_income") @db.Decimal(12, 2)
  totalExpenses   Decimal  @map("total_expenses") @db.Decimal(12, 2)
  netSavings      Decimal  @map("net_savings") @db.Decimal(12, 2)
  budgetVariance  Decimal  @map("budget_variance") @db.Decimal(12, 2)
  categoriesCount Int      @map("categories_count")
  calculatedAt    DateTime @default(now()) @map("calculated_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@unique([userId, year, month])
  @@map("monthly_user_summaries")
}
